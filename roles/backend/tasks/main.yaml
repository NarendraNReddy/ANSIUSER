- name: Disable nodejs
  ansible.builtin.command: "dnf module disable nodejs -y"

- name: enable nodejs
  ansible.builtin.command: "dnf module enable nodejs:20 -y"

- name: install nodejs
  ansible.builtin.dnf:
    name: "{{item}}"
    state: installed
  loop:
    - nodejs
    - mysql 

- name: user add
  ansible.builtin.user:
    name: expense

- name: create directory
  ansible.builtin.file:
    path: /app
    state: directory
- name: download backend application
  ansible.builtin.get_url:
    url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
    dest: /tmp/backend.zip

- name: unzip backend code to app
  ansible.builtin.unarchive:
    src: /tmp/backend.zip
    dest: /app
    remote_src: yes

- name: install npm
  ansible.builtin.command: "npm install"
  args:
    chdir: /app

- name: copy backend.service
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

- name: Pip install pymysql
  ansible.builtin.pip:
    name:
    - PyMySQL
    - cryptography
    executable: pip3.9 

- name: import data base
  community.mysql.mysql_db:
    login_user: "{{login_user}}"
    login_password: "{{ login_password }}"
    login_host: "{{ login_host }}"
    target: /app/schema/backend.sql
    state: import
    name: all   

- name: reload backend service
  ansible.builtin.systemd_service:
    name: backend
    state: reloaded

- name: start and enabled
  ansible.builtin.service:
    name: backend
    state: started
    enabled: yes 